;; vulnerability-scanner.clar
;; Smart Contract that implements vulnerability scanning logic
 
;; Error codes
(define-constant ERR-UNAUTHORIZED u100)
(define-constant ERR-INVALID-PARAMETERS u101)
(define-constant ERR-SCAN-FAILED u102)
 
;; Data variables
(define-data-var scanner-admin principal tx-sender)
(define-data-var auditor-contract principal 'ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM.auditor)
 
;; Vulnerability patterns storage
(define-map known-patterns
  { pattern-id: uint }
  {
    pattern-code: (string-utf8 500),
    detection-logic: (string-utf8 1000),
    impact-level: uint
  }
)
 
;; Scan history tracking
(define-map scan-history
  { contract-id: principal, scan-id: uint }
  {
    timestamp: uint,
    scanner: principal,
    result-summary: (string-utf8 200)
  }
)
 
(define-data-var scan-counter uint u0)
 
;; Public functions
(define-public (register-pattern (pattern-id uint)
                              (pattern-code (string-utf8 500))
                              (detection-logic (string-utf8 1000))
                              (impact-level uint))
  (begin
    (asserts! (is-eq tx-sender (var-get scanner-admin)) (err ERR-UNAUTHORIZED))
    (asserts! (and (> impact-level u0) (< impact-level u10)) (err ERR-INVALID-PARAMETERS))
    (asserts! (> (len pattern-code) u0) (err ERR-INVALID-PARAMETERS))
    (asserts! (> (len detection-logic) u0) (err ERR-INVALID-PARAMETERS))
   
    ;; Add pattern validation before using it in map-set
    (asserts! (< pattern-id (+ (var-get scan-counter) u1000)) (err ERR-INVALID-PARAMETERS))
    
    (map-set known-patterns
      { pattern-id: pattern-id }
      {
        pattern-code: pattern-code,
        detection-logic: detection-logic,
        impact-level: impact-level
      }
    )
    (ok true)
  )
)
 
(define-public (scan-for-vulnerabilities (contract-id principal))
  (let
    (
      (scan-id (var-get scan-counter))
      ;; This would be replaced with actual scanning logic in production
      (scan-result u"{\"vulnerabilities\": [1, 3, 5], \"details\": \"Contract contains potential vulnerabilities\"}")
    )
    (begin
      ;; Validate contract-id is not zero address
      (asserts! (not (is-eq contract-id 'SP000000000000000000002Q6VF78)) (err ERR-INVALID-PARAMETERS))
      
      (var-set scan-counter (+ scan-id u1))
      (map-set scan-history
        { contract-id: contract-id, scan-id: scan-id }
        {
          timestamp: block-height,
          scanner: tx-sender,
          result-summary: scan-result
        }
      )
      (ok scan-id)
    )
  )
)
 
;; Read-only functions
(define-read-only (get-pattern (pattern-id uint))
  (map-get? known-patterns { pattern-id: pattern-id })
)
 
(define-read-only (get-scan-result (contract-id principal) (scan-id uint))
  (map-get? scan-history { contract-id: contract-id, scan-id: scan-id })
)
 
;; Get the latest scan ID for a contract
(define-read-only (get-latest-scan-id)
  (var-get scan-counter)
)
 
;; Administrative functions
(define-public (set-scanner-admin (new-admin principal))
  (begin
    (asserts! (is-eq tx-sender (var-get scanner-admin)) (err ERR-UNAUTHORIZED))
    (asserts! (not (is-eq new-admin tx-sender)) (err ERR-INVALID-PARAMETERS))
    (var-set scanner-admin new-admin)
    (ok true)
  )
)
 
(define-public (set-auditor-contract (new-auditor principal))
  (begin
    (asserts! (is-eq tx-sender (var-get scanner-admin)) (err ERR-UNAUTHORIZED))
    (asserts! (not (is-eq new-auditor (var-get auditor-contract))) (err ERR-INVALID-PARAMETERS))
    (var-set auditor-contract new-auditor)
    (ok true)
  )
)
